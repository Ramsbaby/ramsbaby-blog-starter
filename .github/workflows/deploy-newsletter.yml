name: Deploy newsletter-service to Cloud Run

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: deploy-newsletter
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'peppy-coda-471714-p7' }}
  REGION: ${{ vars.GCP_REGION || 'asia-northeast3' }}
  SERVICE: ${{ vars.CLOUD_RUN_SERVICE || 'newsletter-service' }}

jobs:
  deploy:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight check (require JSON key)
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "ERROR: Missing secret GCP_SA_KEY (Service Account JSON)." >&2
            exit 1
          fi

      - name: Auth to Google Cloud (JSON key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Build container with Cloud Build (async, robust polling)
        id: build
        run: |
          set -euo pipefail
          # Submit build asynchronously; try to capture id first, then name
          OUT=$(gcloud builds submit newsletter-service \
            --tag gcr.io/${PROJECT_ID}/${SERVICE} \
            --async --format='json(id,name,logUrl)') || true

          BUILD_ID=$(echo "$OUT" | jq -r 'try .id // empty')
          BUILD_NAME=$(echo "$OUT" | jq -r 'try .name // empty')
          LOG_URL=$(echo "$OUT" | jq -r 'try .logUrl // empty')

          if [ -z "$BUILD_ID" ] && [ -n "$BUILD_NAME" ]; then
            # name looks like projects/PROJ/locations/global/builds/UUID
            BUILD_ID=${BUILD_NAME##*/}
          fi

          if [ -z "$BUILD_ID" ]; then
            echo "Could not capture BUILD_ID from submit output; falling back to latest ongoing build..."
            BUILD_ID=$(gcloud builds list --ongoing --format='value(id)' --limit=1)
          fi

          if [ -z "$BUILD_ID" ]; then
            echo "ERROR: Unable to determine Cloud Build ID." >&2
            exit 1
          fi

          echo "build_id=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "Queued Cloud Build: ${BUILD_ID}"
          if [ -n "$LOG_URL" ]; then
            echo "Log URL: ${LOG_URL}"
          fi

          echo "Attempting to stream logs (permission errors will be ignored)..."
          gcloud builds log --stream ${BUILD_ID} || echo "Streaming not permitted; using polling."

          echo "Waiting for build to finish..."
          STATUS="PENDING"
          until [ "${STATUS}" = "SUCCESS" ]; do
            STATUS=$(gcloud builds describe ${BUILD_ID} --format='value(status)') || STATUS="UNKNOWN"
            echo "Current status: ${STATUS}"
            case "$STATUS" in
              FAILURE|CANCELLED|EXPIRED)
                echo "Build finished with status ${STATUS}" >&2
                exit 1
                ;;
              SUCCESS)
                break
                ;;
            esac
            sleep 5
          done
          echo "Build succeeded: ${BUILD_ID}"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${SERVICE} \
            --image gcr.io/${PROJECT_ID}/${SERVICE} \
            --platform managed --region ${REGION} --allow-unauthenticated \
            --set-env-vars SPRING_MAIL_HOST=smtp.sendgrid.net \
            --set-env-vars SPRING_MAIL_PORT=587 \
            --set-env-vars SPRING_MAIL_USERNAME=apikey \
            --set-env-vars SPRING_MAIL_PASSWORD=${{ secrets.SENDGRID_API_KEY }} \
            --set-env-vars app.mail.from=${{ vars.MAIL_FROM || 'no-reply@example.com' }} \
            --set-env-vars app.siteUrl=${{ vars.SITE_URL || 'https://ramsbaby.netlify.app' }} \
            --set-env-vars app.rssUrl=${{ vars.RSS_URL || 'https://ramsbaby.netlify.app/rss.xml' }}

      - name: Fetch Service URL
        id: run_url
        run: |
          URL=$(gcloud run services describe ${SERVICE} --region ${REGION} --format='value(status.url)')
          echo "url=${URL}" >> $GITHUB_OUTPUT

      - name: Set app.apiBaseUrl to Service URL
        run: |
          gcloud run services update ${SERVICE} --region ${REGION} \
            --set-env-vars app.apiBaseUrl=${{ steps.run_url.outputs.url }}

      - name: Summary
        run: |
          echo "Deployed to: ${{ steps.run_url.outputs.url }}" >> $GITHUB_STEP_SUMMARY


